============ JavaScript Cheat Sheet ============

====== Data Types ======

    Primitive
        -boolean    // true/false
        -number     // 10, 3.14
        -string     // "Hello World"
        -undefined  // unassigned variables have this value and type
        -null       // a special keyword denoting a lack of value

    Complex
        -object

    Special object types
        -function
        -array

====== Operators ======

    -Operators are special symbols in the language that produce a value from the operands they operate on. Combined with primitive types, we can produce expressions.

    3 + 5
    3 & 5 // Operands
    +   // Operator

    typeof // is a special operator that will produce a STRING that contains the type of the operand it is used on.
        typeof 42 // will result in the STRING 'number'

===== Arithmetic Operators =====

    remember PEMDAS

    + // addition
    - // subtraction
    * // multiplication
    / // division
    % // produces a remainder after dividing two numbers

===== String Concatenation =====

    use the

===== Loops =====

    while loop - great for iterating until a condition is met
    do-while - great for iterating until a condition is met
    for loop - great for doing something n times
    break - great for stopping iteration when some condition is met
    continue - great for skipping certain code per iteration when a condition is met

    While loop syntax:

        while(conditionIsTrue) {
            do something...
        }

        Used to repeat a block of code until condition changes to break the loop. Likely used when the number of iterations is unknown.


===== Objects =====

    Two types of data that can be set to an object;
        - properties: data set to an object
        - methods

===== Browser Object Model =====

        - BOM
        - The BOM allows javascript to interact with the web browser

    ===== Window Object =====

            - the core of the Browser Object Model
            - the window object represents the JavaScript Global object, that means that any variables or functions declared in the global scope become part of the window object

    ===== System Dialogs =====

        - alert(), confirm(), and prompt() are provided by the browser and are made available through the window object. Since the window object represents the global JS object, the methods can be called without mentioning the window object.

    ===== Intervals and Timeouts =====

        - setInterval()
            - allows code to be executed at a specified time interval. The code will continue executing at the given interval until the method clearInterval() is called.

            'use strict';

            // this code will produce a console log every second
            // when count >= max, the interval is cancelled, and the logging will stop

            var count = 0;
            var max = 10;
            var interval = 1000; // interval time in milliseconds

            var intervalId = setInterval(function () {
                if (count >= max) {
                    clearInterval(intervalId);
                    console.log('All done');
                } else {
                    count++;
                    console.log('Repeating this line ' + count);
                }
            }, interval);


====== jQuery ======













.toFixed(2) - returns w/ 2 decimal points

//Define a function named isTrue that takes in any input and returns true if the input provided is exactly equal to true in value and data type.
        function isTrue(input) {
            return input === true;
        }

//Define a function named isFalse that takes in a value and returns a true if and only if the provided input is equal to false in both type and value.
        function isFalse(input) {
            return input === false;
        }

//Define a function named not that takes in any input and returns the boolean opposite of the provided input
        function not(input) {
            return !input;
        }


//Define a function named addOne that takes in a single input. If the input is a number or a numeric string, return the value plus one.
        function addOne(input) {
            return parseFloat(input) + 1;
        }


//Define a function named isEven that takes in a single input. If the input is an even number or a string containing an even number, return true. Any other input should return false for the output
        function isEven(input) {
            return parseFloat(input) % 2 === 0;
        }

//Define a function named isIdentical that takes in two input arguments. If each input is equal both in data type and in value, then return true. If the values are not the same data type or not the same value, return false.
        function isIdentical(input1, input2) {
            return input1 === input2;
        }

//Define a function named isEqual that takes in two input arguments. If each argument is equal only in value, then return true. Otherwise return false
        function isEqual(input1, input2) {
            return input1 == input2;
        }

//Define a function named or that takes in two input arguments. The output returned should be the result of an or operation on both inputs
        function or(input1, input2) {
            return input1 || input2;
        }

//Define a function named and that takes in two input arguments and returns the result of a logical and operation of both inputs.
        function and(input1, input2) {
            return input1 && input2;
        }

//Define a function named concat that takes in two input arguments. If both arguments are strings, then return the concatenated result. If two numbers are provided, then return the string concatenation of each set of numerals.
        function concat(input1, input2) {
            return '' + input1 + input2;
        }